---
title: "Lecture 11. maps(1)"
author: "Heesun Yoo"
output: html_document
---


```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "C:/Users/bench/OneDrive/Desktop/QTM150")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("maps")
library(maps)
library(tidyverse)
library(nycflights13)
library(plotly)
```



## maps (part1) 

The *map_data()* function supplies the map data. It generates a data frame consisting of latitude and longitude coordinates for a given region, and each of these coordinates (data points) traces the boundary of the polygon in the map, making it suitable for plotting with ggplot.

The structure of those data frames:

- long: longitude 
- lat:  latitude 
- order: shows in which order ggplot should “connect the dots”
- region and subregion: tell what region or subregion a set of points surrounds.
- group: A distinct group number assigned to each unique region and subregion. This is very important! ggplot2’s functions can take a group argument which controls whether adjacent points should be connected by lines. If they are in the same group, then they get connected, but if they are in different groups then they don’t.

```{r}
#map_data() provides several kinds of map data. 

states<-map_data("state")
county<-map_data("county")
michigan<-map_data("county", "michigan")
world<-map_data("world")
mexico<-map_data("world","mexico")

```


Convert map data into a map plot: using *geom_polygon()* in ggplot.

*geom_polygon()* drawn lines between points and “closes them up” (i.e. draws a line from the last point back to the first point). You have to map the "group" aesthetic to the "group" variable in the map data. 
(Recall that when drawing line graphs, we map the group aesthetic to the city or region variable in order to distinguish the lines by each geographical unit.) 


## Get dataset with States info to get a map

```{r}
# map_data function generates a data frame of long and lat for the region; options include map_data("county"), map_data("state"), map_data("world"), map_data("world", "XXX(country name)"), 

states<-map_data("state")

#The dataset is essentially a collection of coordinates marking the boundaries and contours of the states on the US map.
#group var: A distinct group number assigned to each unique region (state) and subregion.


qplot(long, lat, data=states)

qplot(long, lat, data=states, geom="path") # missing group argument

```

## need grouping
```{r}

qplot(long, lat, data=states, geom="path", group=group)

qplot(long, lat, data=states, geom="polygon", group=group, fill=I("blue"), color=I("white"))
# fill: inside of the polygon.
# color: the boundary of the polygon
qplot(long, lat, data=states, geom="polygon", group=group, fill=long, color=I("yellow"))

```


```{r}
states <- map_data("state")

ggplot(data = states) + 
  geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") + 
  coord_fixed(1.3) + # adjust the ratio of the plot 
  guides(fill=FALSE)
  # turn off the color legend

## coord_fixed(): it fixes the relationship between one unit in the y direction and one unit in the x direction. every y unit was 1.3 times longer than an x unit (x:y=1:1.3), the plot came out looking good.

```

```{r}
west_coast <- states %>% filter(region %in% c("california", "oregon", "washington"))

ggplot(data = west_coast) + 
  geom_polygon(aes(x = long, y = lat, group = group), fill = "palegreen", color = "black") + 
  coord_quickmap()

## coord_quickmap(): is a quick approximation that does preserve straight lines. It adjusts the aspect ratio of a map in a plot so that the distances in the x and y directions are represented accurately at the center of the plot.
```


## overlay state and county map 
```{r}
state_df <- map_data("state")%>%
    filter(region == "georgia")

county_df <- map_data("county") %>%
    filter(region == "georgia")


ggplot(data = county_df)+ 
  geom_polygon(aes(x=long, y=lat, group=group), fill = "palegreen", color = "white") +
  geom_polygon(data= state_df, aes(x=long, y=lat, group=group), fill = NA, color = "black")+
  coord_quickmap()+ theme_void() #white background

#The group variable in county_df and the group variable in state_df are different. To minimize confusion, I have maintained the group argument in each geometric layer that will be affected by this argument.

# fill=NA to avoid obscuring the previously plotted polygons with state-wide shading
```


## Displaying the information on the map (part1)
```{r}
# external data set about GA county population
GAdat<-read.csv("GAdat-1.csv", header=T)

GAdat

# data manipulation prior to joining 
(GAdat$County <- tolower(GAdat$County))

(county_df$subregion <- replace(county_df$subregion, county_df$subregion=="de kalb", "dekalb"))

mapdat <- left_join(GAdat, county_df, by = c("County"="subregion")) 
# merge GA county map data and GA county population data 

mapdat


ggplot(mapdat, aes(x=long, y=lat)) +
        geom_polygon(aes(group=group, fill = Population), color="yellow") + 
  #fill county polygons with different colors based on their population 
        scale_fill_gradient(low="blue", high="red") + 
        geom_polygon(data = state_df, aes(group=group), color = "black", fill = NA) +  # State boundary. fill=NA to avoid obscuring the previously plotted polygons with state-wide shading
        theme_void()+ coord_quickmap()

```



## choose your own color
```{r}
ggplot(mapdat, aes(long, lat)) +
        geom_polygon(aes(group=group, fill = Population), color = alpha("red", 0.2))+
        scale_fill_gradientn(colors = rev(rainbow(7)), trans = "log10")+ # easily assign the different colors to those observations
        geom_polygon(data = state_df, aes(group=group),color = "black", fill = NA) + 
        theme_void() +
        coord_fixed(1.2)

# alpha("color", desired level of transparency )

```



## Displaying the information on the map (part2 )
### Add the points (with longitude and latitude) to the map

Example: mark the airports with the highest arrival delays on a map
```{r}

states<-map_data("state")


data1<-flights %>% 
     drop_na() %>%
     group_by(dest) %>%
     summarise(avg_delay=mean(arr_delay)) %>%
     left_join(airports,by=c("dest"="faa")) %>% filter(dest!= "ANC" & dest!= "HNL")

data1

p<- ggplot(states)+
  geom_polygon(aes(x=long, y=lat, group = group), fill="white", color ="black")+ #state map
  geom_point(data=data1, 
             aes(x=lon, y=lat, color=avg_delay, size=avg_delay, text=name), na.rm=T)+ #plot data1 on the map
  scale_color_gradient(low = "green", high="darkblue")+
  scale_size_continuous(range=c(1,4))+
  coord_fixed(1.2)+
  theme_void() 

p

ggplotly(p)


```

Example: mark the most popular airport on a map
```{r}

data2<-flights %>%
  count(dest) %>%
  left_join(airports,by=c("dest"="faa"))%>% filter(dest!= "ANC" & dest!= "HNL")

data2

airportpop<- ggplot(states)+
  geom_polygon(aes(x=long, y=lat, group = group), fill="white", color ="black")+ #state map
  geom_point(data=data2, 
             aes(x=lon, y=lat, color=n, size=n, text=name), na.rm=T)+ #plot data1 on the map
  scale_color_gradient(low = "green", high="darkblue")+
  scale_size_continuous(range=c(1,4))+
  coord_fixed(1.2)+
  theme_void() 

ggplotly(airportpop)


```

