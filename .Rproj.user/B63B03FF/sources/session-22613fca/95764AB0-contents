---
title: "Lecture 11. maps(2)"
author: "Heesun Yoo"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "C:/Users/bench/OneDrive/Desktop/QTM150")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("maps")
#install.packages("usdata")
#install.packages("sf")
#install.packages("viridis")


library(tidyverse)
library(plotly)
library(maps)
library(usdata)
library(sf)
library(viridis)
```


## maps (part2 - practice)

Review: plotting a map using map_data() and ggplot2's geom_polygon()

[1] The *map_data()* function provides map data, including latitude and longitude coordinates for specific regions. These coordinates trace the boundaries of polygons on the map.

The data frames are structured as follows:

-long: longitude
-lat: latitude
-order: indicates the sequence in which ggplot should connect the points.
-region and subregion: identify the region or subregion enclosed by a set of points.
-group: A unique group number assigned to each region and subregion pair. 
It is essential to map this group variable to the group aesthetic attribute in ggplot. Points within the same group are connected, whereas points in different groups are not.

The *map_data()* function can generate various map types, including US state maps, county maps, and world maps.


[2] We use the dataframe generated by map_data() to create a map using ggplot2, specifically with the *geom_polygon()* function. It is crucial to map the group variable to the group aesthetic.

[3] Then, we explored methods for displaying additional information on the map:

- Case 1: Representing Information with Varying Polygon Colors

An additional dataframe is joined to the map dataframe based on a shared key variable(s). Once merged, it appears as a new variable in the map dataframe. We then map this new variable to the fill aesthetic attribute.
  
- Case 2: Scatter Plot on the Map 

The additional dataframe, which is to be plotted on the map, must include latitude and longitude coordinates.
We overlay these coordinates using geom_point() on top of the geom_polygon(). 


### Practice
```{r}
states<-map_data("state")
county<-map_data("county")
getwd()
tj <-read.csv("tj-locations-1.csv") # A comprehensive dataset of Trader Joe's locations in the US, consisting of latitude and longitude coordinates for each location, is sourced from kaggle.com.
```


#### YOUR TURN 1.

Plot the state map and overlay it with the county map (entire us state and county map). Then, add the Trader Joe's locations with geom_point on the map.

```{r}
#tuesday lecture note -  line 102-119 + line 183-190 
state_df <- map_data("state")%>%
    filter(region == "georgia")

county_df <- map_data("county") %>%
    filter(region == "georgia")

states<-map_data("state")


p<-ggplot(data = county_df)+ 
  geom_polygon(data= states, aes(x=long, y=lat, group=group), fill = NA, color = "black")+
    geom_point(data=tj,aes(x=longitude, y=latitude, text=name), na.rm=T)+
  coord_quickmap()+ theme_void()

p
```

Use ggplotly for an interactive graphic. 

```{r}
ggplotly(p)
```



#### YOUR TURN 2. 

Previously, we plotted the Trader Joe's locations using a scatter plot. Now, we will manipulate the TJ data in order to represent the number of TJs in each state with varying sizes of the geom_point. To achieve this, we need to summarize the tj data at the state level.

Create summary statistics of the tj data, using the *average* of latitudes and longitudes, and *the number of locations (count)* in a given *state*.  

This data frame will have four columns, *state*, *(avg)latitude*, *(avg)longitude*, and  *count*. Save this object as *tj_new*.

```{r}
tj_new <- tj %>% 
  group_by(state) %>% 
  summarize(avglatitude=mean(latitude, na.rm=T),
            avglongitude=mean(longitude, na.rm=T),
            count=n()) %>% 
  ggplot(data = tj)+ 
  geom_polygon(data= states, aes(x=long, y=lat, group=group), fill = NA, color = "black")+
    geom_point(data=tj,aes(x=avglongitude, y=avglatitude, text=state), na.rm=T)+
  coord_quickmap()+ theme_void()
  
```


Next, we will plot this tj_new on top of the state map. When plotting the new data, we will use geom_point and represent the number of locations (count) in each state with varying sizes of dots.

```{r}
#tuesday lecture note -  line 102-119 +  line 183-190 
p2 <- 

ggplotly(p2)
```



#### YOUR TURN 3.

Lastly, we will join the state map data with the tj_new dataset. The key variable for joining these two datasets is ???.  After merging, the state map data will include an additional variable representing the number of Trader Joe's locations in each state. 

To ensure the join works correctly, the values under each key variable must match. Currently, they do not align. Therefore, we need to convert the values so that the key variable in both datasets is consistent.

 
```{r}
tj_new<-tj_new%>%
  mutate(state=abbr2state(state)) %>% # abbr -> full state name
  mutate(state=tolower(state)) 
# convert it to lower case to align with the values in map dataset
```


Join the state map data with tj_new dataset.

```{r}
states_tj <-states %>% 
  left_join(tj_new, by=c("region"="state"))

#states_tj is now the new map data with an additional variable - `count` var, the number of Tj locations.
```


Plot the *states_tj* map data, and represent the number of Trader Joe's locations within a state with varying polygon colors. You can achieve this by mapping the XXXX variable to the fill aesthetic attribute.

```{r}
# tuesday lecture note -  line 122- 145. 

```


## map from external sources: import shapefiles using *sf* package and plot it with  ggplot2's *geom_sf()*.

The 'map' package is useful, but the types of maps it provides are limited, especially as it lacks detailed, lower-level administrative boundaries for countries other than the US. However, this information can be found elsewhere on the web. Typically, map data (geospatial data) on the web is stored in shapefiles.

What is the shapefile format? A shapefile is a type of file used to store geographical data. It is a common data format for storing spatial data in Geographic Information Systems (GIS) software, such as ArcGIS and QGIS.

This format consists of a collection of files with a common filename prefix. The three mandatory files have filename extensions .shp, .shx, and .dbf, and you need to keep them together in the same folder. The actual shapefile relates specifically to the .shp file, but it is incomplete on its own and requires other supporting files.

We will import shapefiles into R as a dataframe and plot them using ggplot2. Specifically, 'geom_sf()' will enable us to plot this shapefile. Additionally, we will join a new dataframe with the map data and then display this new variable.


### Example

When importing the shapefile as a dataframe, we use the *st_read("XXXX.shp")* function. Remember, when you download shapefiles from the web, you must download the .shp, .shx, and .dbf files together and keep them in the same folder.

Then, let's plot this geospatial data using ggplot2's geom_sf()

```{r}

mexico<-st_read("mexstates.shp") # mexico's state map. 

ggplot(data=mexico)+
  geom_sf(fill="white", color="black")+ 
  theme_void()

# You don't need to specify x-axis (longitude) and y-axis (latitude). geom_sf() is smart enough to know the geometry types and draw spatial objects accordingly.

# Also, you don't need to map `group` variable to the group aesthetic. 

```

Then, on top of this map, we will display the number of homicides in each state of Mexico. The data is provided below.

```{r}
mexhomicide <-read.csv("mexhomicide-1.csv")
# entitad: state identifier
# homicide15: the number of homicides in 2015 

```

We will join the Mexico state map with this homicide dataframe, using the XXXX variable as a key variable. Then, let's plot the merged geospatial data, representing the homicide counts for each state with varying colors of the polygons. 

```{r}
mexico_merged <- mexico %>%
  left_join(mexhomicide, by=c("FIPS_ADMIN"="entidad"))

ggplot()+
  geom_sf(data=mexico_merged, aes(fill=homicide2015), color="black")+
  scale_fill_gradientn(colors=viridis(7))+
  theme_void()
```

Enhance this plot with ggpplotly. 
```{r}
p_mex <- ggplot()+
  geom_sf(data=mexico_merged, aes(fill=homicide2015, text=ADMIN_NAME), color="black")+
  scale_fill_gradientn(colors=viridis(7))+
  theme_void()

ggplotly(p_mex)
```


