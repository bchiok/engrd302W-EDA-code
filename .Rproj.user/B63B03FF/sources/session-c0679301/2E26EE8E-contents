---
title: "Lecture 6. tidyr"
author: "Heesun Yoo"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "C:/Users/bench/OneDrive/Desktop/QTM150")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(babynames)
library(nycflights13)
```


## tidyr

The *tidyr* package helps tidy up messy datasets.

There are three interrelated rules which make a dataset tidy:

-   Each variable must have its own column

-   Each observation must have its own row

-   Each value must have its own cell

There are four key functions in the *tidyr* package, 
***pivot_longer()***, ***pivot_wider()***, ***separate()***, *unite()*.


## toy data

*tibble* is very similar to *data.frame*, which is better to read a large data set.

```{r,echo=FALSE}

# population table
table1<-tibble( 
  country = c("Afghanistan","Brazil","China"),
  `1999` = c(19987071, 172006362, 1272915272),
  `2000` = c(20595360, 174504898, 1280428583)
)

table1

```

```{r, echo=FALSE}
# case table

table2<-tibble(
  country = c("Afghanistan","Brazil","China"),
  `1999` = c(745, 37737, 212258), #In order for the number to be a variable name, we need ``
  `2000` = c(2666, 80488, 213766)
)

table2

```

## pivoting

### 1. pivot_longer()

A common problem is a dataset where some of the column names are not names of variables, but *values* of a variable.

To tidy a dataset like this, we need to pivot the offending columns into a new pair of variables, it makes "wide" data longer.

Pivot longer is usually used when we have multiple separate columns for the same variable with different time sequences. This method reshapes the dataset, consolidating those columns into one and introducing a separate time variable, resulting in an increase in rows.

```{r}
#template:

#pivot_longer(dataset,
# a set of columns = "The set of columns whose names are values, not variables", 
# names_to = "The name of the variable to move the column names to", 
# values_to = "The name of the variable to move the column values to")

pivot_longer(table1, c("1999","2000"), names_to = "year", values_to = "population")
#Population values, previously scattered across two columns, are now consolidated into one


table2 %>%
  pivot_longer(2:3, names_to = "year", values_to = "case")

#year variable is a character variable.  

```


*pivot_longer()* makes datasets longer by increasing the number of rows and decreasing the number of columns relatively.



### 2. pivot_wider()

*pivot_wider()* is the opposite of *pivot_longer()*. We use it when an observation is scattered across multiple rows. *pivot_longer()* makes wide tables narrower and longer, *pivot_wider()* makes long tables shorter and wider.

```{r, echo=FALSE}
table3<- tibble(
  country = c("Afghanistan", "Afghanistan", "Afghanistan", "Afghanistan", "Brazil", "Brazil", "Brazil", "Brazil","China", "China","China", "China"),
   year = c(1999,1999,2000,2000,1999,1999,2000,2000,1999,1999,2000,2000),
   type = c("case", "population","case", "population","case", "population","case", "population","case", "population","case", "population"),
   count = c(745, 19987071, 2666, 20595360, 37737, 172006362, 80488, 174504898, 212258, 1272915272, 213766, 1280428583)
)
table3
```

```{r}
# template: 

# pivot_wider(dataset, 
#             names_from = "the column to take variable names from", 
#             values_from = "the column to take values from")
```

```{r}
table3 %>%
  pivot_wider(names_from = "type",values_from = "count")
```

## Separate and Unite

*separate()* pulls apart one column into multiple columns, *unite()* is the inverse of *separate()*.

```{r, echo=FALSE}
table4<-tibble(
    country = c("Afghanistan", "Afghanistan", "Brazil", "Brazil","China", "China"),
    year = c(1999,2000,1999,2000,1999,2000),
    rate= c("745/19987071/1", "2666/20595360/2", "37737/172006362/3", "80488/174504898/4", "212258/1272915272/5", "213766/1280428583/6")
)
table4
```

### 1. separate()

Example:

```{r}
#template
#separate(dataset, old variable, into= c("",""), sep=)

table4 %>%
separate(rate, into=c("case","population","index"), sep="/")

# separate by position (count from left)
flights %>%
  select(time_hour) %>%
  separate(time_hour,into=c("year","month","day"), sep="-") %>%
  separate(day, into=c("day","time"), sep=-8)

```

### 2. unite()

```{r, echo=FALSE}
name <- tibble(
  first_name = c("John", "Jane", "Jim"),
  last_name = c("Doe", "Smith", "Brown")
)
name
```

```{r}
#template
#unite(dataset, col= "new variable", old variable, old variable , sep=)

name %>%
  unite(col = "full_name", first_name, last_name, sep = " ")
```


## Missing value

```{r, echo=FALSE}
#toy data
stocks<-tibble(
  year = rep(c(2015,2016), each=4),
  qtr = rep(c(1,2,3,4), 2),
  return = c("1.88", "0.59", "0.35", NA, NA, "0.92","0.17", "2.66")
)
stocks

sum(is.na(stocks$return))

```

Example

```{r}
stocks1<-stocks %>%
  na.omit()  #empty parenthesis because dataset already implied by pipe operator
stocks1
# turn explicit missing values implicit
```

Example

```{r}

stocks2 <-tibble(
  year = c(rep(2015,3), rep(2016,5)),
  period = c(1:3, 1:5),
  item = c("a","b","c","a", "a", "b","b","d"), 
  return = c("1.88", "0.59", "0.35", "0.92","0.17", "2.66", "3.88", "2.22"))
stocks2

stocks2 %>%
  complete(year, period)  # it will show NA for every combination of year and period. 

# making missing value explicit

stocks2 %>%
  complete(year, item) # it will show NA for every combination of year and item. 
```

Example

```{r}
stocks %>%
  arrange(year, qtr)%>%
  fill(return)   # NA filled with the most recent non missing value
```







